{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/to-do-items.js","webpack://to-do-list/./src/plans-array.js","webpack://to-do-list/./src/dynamic-buttons.js","webpack://to-do-list/./src/input-toggle.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    // removeToDoItems() {\n\n    // }\n}","/*This module is for creating new Do Do List items*/\n\nexport default class PlanItem {\n    constructor(parent, title, description, dueDate, priority) {\n        this._parent = parent;\n        this._title = title;\n        this._dueDate = dueDate;\n        this._description = description;\n        this._priority = priority;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(value) {\n        this._description = value;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(value) {\n        this._priority = value;\n    }\n\n    get dueDate() {\n        return this._dueDate;\n    }\n\n    set dueDate(value) {\n        this._dueDate = value;\n    }\n}","export const planArray = [];\n\nexport function pushPlan(plan) {\n    planArray.push(plan)\n}\n\nexport const arrayDel = {\n\n    del: function (element) {\n\n        function splitArray() { \n            const index = planArray.findIndex(obj => obj.title === element.className);//element in this case refers to the delete button's class\n            return index;\n        }\n\n        planArray.forEach((obj) => {\n            if (element.classList.contains(obj.title)) {\n                planArray.splice(splitArray(), 1);\n            }\n        });\n    }\n\n}\n\nexport const itemToList = {\n\n    addTask: function (title, task) {\n\n        function pushToProject() {\n        const index = planArray.findIndex(obj => obj.title === title.textContent);//element here refers to the project's title DOM element\n        return index;\n        }\n\n        planArray.forEach((obj) => {\n            if(title.textContent === obj.title) {\n                obj.addToDoItems(task);\n                console.log(obj);\n            }\n        });\n\n    \n\n},\n\n    // displayTasks: function(target) { \n\n    //     function displayToDom() {\n    //     const index = planArray.findIndex(obj => obj.title === target.textContent);\n    //     return index;\n    //     }\n\n    //     planArray.forEach((obj) => {\n    //         if(obj.title === target.textContent) {\n                \n    //             console.log(obj.toDoItems());\n    //         }\n    //     })\n    // }\n}\n\n\n\n","export function createButton(title, elemClass) {\n    const btn = document.createElement('button');\n    btn.classList.add(`${elemClass}`);//note: do NOT add periods into the formatted strings for this!\n    btn.setAttribute('id', title);\n    btn.textContent = title;\n    return btn;\n}\n\n\nexport function btnDel(element, elemClass) {\n    const button = document.querySelectorAll(`${elemClass}`);\n    button.forEach((btn) => {\n        if (element.classList.contains(btn.id)) {\n        btn.remove();\n        }\n    });\n}\n\n","export const inputToggle = {\n\n    toggleOn: function (toggle) {\n        toggle.classList.add('visible');\n        toggle.classList.remove('invisible')\n    },\n    \n    toggleOff: function (toggle) {\n        toggle.classList.add('invisible');\n        toggle.classList.remove('visible');\n    }\n};","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\nimport * as list from './plans-array.js';\nimport * as dynButton from './dynamic-buttons.js';\nimport {inputToggle} from './input-toggle.js';\n\n// Delete buttons call removal method and deletes from DOM\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n\nconst plansPanel = document.querySelector('#plans-panel');\nconst planTitle = document.querySelector('#plan-title');\n\n//project creation\nconst newPlanBtn = document.querySelector('#add-plans'); \nconst planForm = document.querySelector('#plan-form-id');\nnewPlanBtn.addEventListener('click', () => {\n    inputToggle.toggleOn(planForm);\n    inputToggle.toggleOff(itemForm);\n    itemInput.value = '';//empties the input value of the other form\n});\n\nconst plansList = document.querySelector('#plans-list');\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nfunction planSubmitFunc(e) {\n    e.preventDefault();\n    let newPlan = new Plan(planInput.value);\n    list.pushPlan(newPlan);\n    plansList.appendChild(dynButton.createButton(newPlan.title, 'plan-buttons'));\n    planInput.value = ''\n    inputToggle.toggleOff(planForm);\n}\nplanSubmit.addEventListener('click', planSubmitFunc);\n\nconst planCancel = document.querySelector('#plan-cancel');\nfunction planCancelFunc(e) {\n    e.preventDefault();\n    planInput.value = '';\n    inputToggle.toggleOff(planForm);\n}\nplanCancel.addEventListener('click', planCancelFunc);\n\n\n//plans dom display\nconst todayBtn = document.querySelector('#today');\n\nconst itemsList = document.querySelector('#plan-items');\n\nplansList.addEventListener('click', function(e) {\n\n    planTitle.textContent = e.target.textContent;\n    trash.className = e.target.id;\n    itemsList.innerHTML = '';\n    console.log(list.planArray);\n\n    list.planArray.forEach((obj) => {\n        obj.toDoItems.forEach((item) => {\n            if(obj.title === e.target.textContent) {\n                itemsList.innerHTML = '';\n                for (let i = 0; i< obj.toDoItems.length; i++){\n                itemsList.innerHTML += `<button class=\".plan-buttons\" id=\"${obj.toDoItems[i].title}\">${obj.toDoItems[i].title}</button>`;\n                }\n            }\n            })\n    })\n})\n\n\nconst trash = document.querySelector('#trash');\ntrash.addEventListener('click', (e) => {\nplanTitle.textContent = '';\ndynButton.btnDel(trash, '.plan-buttons');\nconst target = e.target;\nlist.arrayDel.del(trash);\ntrash.className = '';\n})\n\n\n\n//task creation\n\nconst addItem = document.querySelector('#add-item');\nconst itemForm = document.querySelector('#item-form-id');\n\n//event listener for the 'New Task' button and the form it brings up\naddItem.addEventListener('click', () => {\n    inputToggle.toggleOn(itemForm);\n    inputToggle.toggleOff(planForm);\n    planInput.value = ''//empties the input value of the other form\n});\n\n\n// event listener for the form's submit button\nconst itemInput = document.querySelector('#item-input');\nconst itemSubmit = document.querySelector('#item-submit');\nfunction itemSubmitFunc(e) {\n    e.preventDefault();\n    let newItem = new PlanItem(planTitle.textContent, itemInput.value); //planTitle.textcontent is just an argument to match the task with the project of the same name\n    //the following condition matches the DOM title with the task's parent list property\n    if(planTitle.textContent === newItem.parent){\n        console.log(newItem);\n        list.itemToList.addTask(planTitle, newItem);\n        itemsList.appendChild(dynButton.createButton(newItem.title, 'item-buttons'));\n        itemInput.value = ''\n        inputToggle.toggleOff(itemForm);\n    }\n}\nitemSubmit.addEventListener('click', itemSubmitFunc);\n\nconst itemCancel = document.querySelector('#item-cancel');\nfunction itemCancelFunc(e) {\n    e.preventDefault();\n    itemInput.value = '';\n    inputToggle.toggleOff(itemForm);\n}\n\nitemCancel.addEventListener('click', itemCancelFunc);\n\n\nconst primary = new Plan('Primary');\nconst primaryBtn = document.querySelector('#primary');\n\nprimaryBtn.addEventListener('click', () => {\n    // plansPanel.innerHTML = '';\n    planTitle.textContent = primary.title;\n    console.log(primary);\n    addItem.setAttribute('data-identifier', 'primary');\n});\n","import * as startUp from './DOMfunctions'; \n\ndocument.addEventListener('DOMContentLoaded', startUp);\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","PlanItem","parent","description","dueDate","priority","_parent","_dueDate","_description","_priority","planArray","createButton","elemClass","btn","document","createElement","classList","add","setAttribute","textContent","inputToggle","toggle","remove","planTitle","querySelector","newPlanBtn","planForm","addEventListener","itemForm","itemInput","plansList","planInput","e","preventDefault","newPlan","plan","appendChild","itemsList","target","trash","className","id","innerHTML","console","log","obj","forEach","i","length","element","querySelectorAll","contains","splice","findIndex","addItem","newItem","task","primary"],"sourceRoot":""}