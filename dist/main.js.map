{"version":3,"file":"main.js","mappings":"mBACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,ICHxC,MAAMC,EACjBC,YAAYC,GACRC,KAAKC,OAASF,EACdC,KAAKE,WAAa,GAGlBH,YACA,OAAOC,KAAKC,OAGZE,gBACA,OAAOH,KAAKE,WAGhBE,aAAaC,GACTL,KAAKG,UAAUG,KAAKD,ICfb,MAAME,EACjBT,YAAYC,EAAOS,EAAaC,EAASC,GACrCV,KAAKC,OAASF,EACdC,KAAKW,aAAeH,EACpBR,KAAKY,UAAYF,EACjBV,KAAKa,SAAWJ,EAGhBV,YACA,OAAOC,KAAKC,OAGZF,UAAMH,GACNI,KAAKC,OAASL,EAGdY,kBACA,OAAOR,KAAKW,aAGZH,gBAAYZ,GACZI,KAAKW,aAAef,EAGpBc,eACA,OAAOV,KAAKY,UAGZF,aAASd,GACTI,KAAKY,UAAYhB,EAGjBa,cACA,OAAOT,KAAKa,SAGZJ,YAAQb,GACRI,KAAKa,SAAWjB,GCrCjB,MAAMkB,EAAY,GCFlB,SAASC,EAAahB,GACzB,MAAMiB,EAAMC,SAASC,cAAc,UAInC,OAHAF,EAAIG,UAAUC,IAAI,mBAClBJ,EAAIK,aAAa,KAAMtB,GACvBiB,EAAIM,YAAcvB,EACXiB,EDFGC,SAASM,eAAe,cEH/B,MAAMC,EAEC,SAAUC,GAChBA,EAAON,UAAUC,IAAI,WACrBK,EAAON,UAAUO,OAAO,cAJnBF,EAOE,SAAUC,GACjBA,EAAON,UAAUC,IAAI,aACrBK,EAAON,UAAUO,OAAO,YCI1BC,EAAaV,SAASW,cAAc,cACpCC,EAAWZ,SAASW,cAAc,iBACxCD,EAAWG,iBAAiB,SAAS,KACjCN,EAAqBK,GACrBL,EAAsBO,GACtBC,EAAUpC,MAAQ,MAGtB,MAAMqC,EAAYhB,SAASW,cAAc,eACnCM,EAAYjB,SAASW,cAAc,eACtBX,SAASW,cAAc,gBAU/BE,iBAAiB,SAT5B,SAAwBK,GACpBA,EAAEC,iBACF,IAAIC,EAAU,IAAIxC,EAAKqC,EAAUtC,OHtB9B,IAAkB0C,IGuBPD,EHtBdvB,EAAUR,KAAKgC,GGuBfC,QAAQC,IAAI,GACZP,EAAUQ,YAAY,EAAuBJ,EAAQtC,QACrDmC,EAAUtC,MAAQ,GAClB4B,EAAsBK,MAIPZ,SAASW,cAAc,gBAM/BE,iBAAiB,SAL5B,SAAwBK,GACpBA,EAAEC,iBACFF,EAAUtC,MAAQ,GAClB4B,EAAsBK,MAM1B,MAAMa,EAAYzB,SAASW,cAAc,eACnCe,EAAU1B,SAASW,cAAc,aACjCG,EAAWd,SAASW,cAAc,iBACxCe,EAAQb,iBAAiB,SAAS,KAC9BN,EAAqBO,GACrBP,EAAsBK,GACtBK,EAAUtC,MAAQ,MAGtB,MAAMoC,EAAYf,SAASW,cAAc,eACtBX,SAASW,cAAc,gBAQ/BE,iBAAiB,SAP5B,SAAwBK,GACpBA,EAAEC,iBACF,IAAIQ,EAAU,IAAIrC,EAASyB,EAAUpC,OACrC8C,EAAUD,YAAY,EAAuBG,EAAQ7C,QACrDiC,EAAUpC,MAAQ,GAClB4B,EAAsBO,MAIPd,SAASW,cAAc,gBAO/BE,iBAAiB,SAN5B,SAAwBK,GACpBA,EAAEC,iBACFJ,EAAUpC,MAAQ,GAClB4B,EAAsBO,MAMRd,SAASW,cAAc,eAKzBX,SAASW,cAAc,SACtBX,SAASW,cAAc,UC/ExCX,SAASa,iBAAiB,mBAAoB,I","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/to-do-items.js","webpack://to-do-list/./src/lists-array.js","webpack://to-do-list/./src/dynamic-buttons.js","webpack://to-do-list/./src/input-toggle.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    // removeToDoItems() {\n\n    // }\n}","/*This module is for creating new Do Do List items*/\n\nexport default class PlanItem {\n    constructor(title, description, dueDate, priority) {\n        this._title = title;\n        this._description = description;\n        this._priority = priority;\n        this._dueDate = dueDate;\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(value) {\n        this._description = value;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(value) {\n        this._priority = value;\n    }\n\n    get dueDate() {\n        return this._dueDate;\n    }\n\n    set dueDate(value) {\n        this._dueDate = value;\n    }\n}","//this module holds the array of projects that populate the sidebar and the functions for adding and removing them\n\nexport const planArray = []; //the array items will be pushed to the #plans-list div \nconst title = document.getElementById('plan-title');\nexport function pushPlan(plan) {\n    planArray.push(plan)\n}\n\nexport function splitArray(plan) {\n    \n    const index = planArray.findIndex(obj => obj.title === title.textContent);\n    return index;\n}\n\nexport function deletePlan() {\n\n    const btn = document.querySelectorAll('.dynamic-buttons');\n    planArray.forEach((obj) => {\n        if (obj.title === title.textContent) {\n            planArray.splice(splitArray(), 1);\n        }\n    })\n}\n\n//the delete button needs to be directly tagged and associated to the specific project\n//when opening a project it must needs to furnish a delete button that takes an associated id\n\n/* the following is pasted as a memory aid */\n\n// removeBook.addEventListener('click', () => {\n//     const title = document.getElementById('book-title');\n//     const btn = document.querySelectorAll('.books');\n//     btn.forEach((book) => {\n//         if (book.id === title.textContent) {\n//             book.remove();\n//         }\n//     })\n//     myLibrary.forEach((obj) => {\n//         if (obj.title === title.textContent) {\n            \n//             myLibrary.splice(deleteBook(), 1);\n//         }\n//     })\n//     console.log(myLibrary);\n//     bookContainer.classList.remove('show');\n// });\n\n\n// function deleteBook() {\n//     const title = document.getElementById('book-title');\n//     const index = myLibrary.findIndex(obj => obj.title === title.textContent);\n\n//     return index\n// }\n\n// btn.foreach is dom manipulation\n//mylibrary.foreach is for deleting the corresponding book from the array\n//I will do something similar here","export function createButton(title) {\n    const btn = document.createElement('button');\n    btn.classList.add('dynamic-buttons');\n    btn.setAttribute('id', title);\n    btn.textContent = title;\n    return btn;\n}\n\nexport function deleteButton() {\n    const title = document.getElementById('book-title');\n\n    return lists.planArray.findIndex(obj => obj.title === title.textContent);\n\n}","export const inputToggle = {\n\n    toggleOn: function (toggle) {\n        toggle.classList.add('visible');\n        toggle.classList.remove('invisible')\n    },\n    \n    toggleOff: function (toggle) {\n        toggle.classList.add('invisible');\n        toggle.classList.remove('visible');\n    }\n};","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\nimport * as list from './lists-array.js';\nimport * as dynButton from './dynamic-buttons.js';\nimport {inputToggle} from './input-toggle.js';\n\n// Delete buttons call removal method and deletes from DOM\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n//project creation\nconst newPlanBtn = document.querySelector('#add-plans'); \nconst planForm = document.querySelector('#plan-form-id');\nnewPlanBtn.addEventListener('click', () => {\n    inputToggle.toggleOn(planForm);\n    inputToggle.toggleOff(itemForm);\n    itemInput.value = '';//empties the input value of the other form\n});\n\nconst plansList = document.querySelector('#plans-list');\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nfunction planSubmitFunc(e) {\n    e.preventDefault();\n    let newPlan = new Plan(planInput.value);\n    list.pushPlan(newPlan);\n    console.log(list.planArray);\n    plansList.appendChild(dynButton.createButton(newPlan.title));\n    planInput.value = ''\n    inputToggle.toggleOff(planForm);\n}\nplanSubmit.addEventListener('click', planSubmitFunc);\n\nconst planCancel = document.querySelector('#plan-cancel');\nfunction planCancelFunc(e) {\n    e.preventDefault();\n    planInput.value = '';\n    inputToggle.toggleOff(planForm);\n}\nplanCancel.addEventListener('click', planCancelFunc);\n\n\n//task creation\nconst itemsList = document.querySelector('#plan-items');\nconst addItem = document.querySelector('#add-item');\nconst itemForm = document.querySelector('#item-form-id');\naddItem.addEventListener('click', () => {\n    inputToggle.toggleOn(itemForm);\n    inputToggle.toggleOff(planForm);\n    planInput.value = ''//empties the input value of the other form\n});\n\nconst itemInput = document.querySelector('#item-input');\nconst itemSubmit = document.querySelector('#item-submit');\nfunction itemSubmitFunc(e) {\n    e.preventDefault();\n    let newItem = new PlanItem(itemInput.value);\n    itemsList.appendChild(dynButton.createButton(newItem.title));\n    itemInput.value = ''\n    inputToggle.toggleOff(itemForm);\n}\nitemSubmit.addEventListener('click', itemSubmitFunc);\n\nconst itemCancel = document.querySelector('#item-cancel');\nfunction itemCancelFunc(e) {\n    e.preventDefault();\n    itemInput.value = '';\n    inputToggle.toggleOff(itemForm);\n}\n\nitemCancel.addEventListener('click', itemCancelFunc);\n\n\nconst planTitle = document.querySelector('#plan-title'); //this is where a project's title will be displayed on the main panel\n\n\n\n//these two are sidebar elements and function similarly to the project buttons that will be appended under sidebarPlans in that they will display to the main panel\nconst miscBtn = document.querySelector('#misc');\nconst todayBtn = document.querySelector('#today');","import * as startUp from './DOMfunctions'; \n\ndocument.addEventListener('DOMContentLoaded', startUp);\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","PlanItem","description","dueDate","priority","_description","_priority","_dueDate","planArray","createButton","btn","document","createElement","classList","add","setAttribute","textContent","getElementById","inputToggle","toggle","remove","newPlanBtn","querySelector","planForm","addEventListener","itemForm","itemInput","plansList","planInput","e","preventDefault","newPlan","plan","console","log","appendChild","itemsList","addItem","newItem"],"sourceRoot":""}