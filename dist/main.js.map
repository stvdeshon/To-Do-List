{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/to-do-items.js","webpack://to-do-list/./src/plans-array.js","webpack://to-do-list/./src/dynamic-buttons.js","webpack://to-do-list/./src/input-toggle.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    // removeToDoItems() {\n\n    // }\n}","/*This module is for creating new Do Do List items*/\n\nexport default class PlanItem {\n    constructor(title, description, dueDate, priority) {\n        this._title = title;\n        this._description = description;\n        this._priority = priority;\n        this._dueDate = dueDate;\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(value) {\n        this._description = value;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(value) {\n        this._priority = value;\n    }\n\n    get dueDate() {\n        return this._dueDate;\n    }\n\n    set dueDate(value) {\n        this._dueDate = value;\n    }\n}","export const planArray = [];\n\nexport function pushPlan(plan) {\n    planArray.push(plan)\n}\n\nexport const arrayDel = {\n\n    del: function (element) {\n\n        function splitArray() { \n            const index = planArray.findIndex(obj => obj.title === element.className);\n            return index;\n        }\n\n        planArray.forEach((obj) => {\n            if (element.classList.contains(obj.title)) {\n                planArray.splice(splitArray(), 1);\n            }\n        });\n    }\n}","export function createButton(title) {\n    const btn = document.createElement('button');\n    btn.classList.add('dynamic-buttons');\n    btn.classList.add(title);\n    btn.setAttribute('id', title);\n    btn.textContent = title;\n    return btn;\n}\n\nexport function btnDel(element, elemClass) {\n\n    const button = document.querySelectorAll(`${elemClass}`);\n    button.forEach((btn) => {\n        if (element.classList.contains(btn.id)) {\n        btn.remove();\n        }\n    });\n}","export const inputToggle = {\n\n    toggleOn: function (toggle) {\n        toggle.classList.add('visible');\n        toggle.classList.remove('invisible')\n    },\n    \n    toggleOff: function (toggle) {\n        toggle.classList.add('invisible');\n        toggle.classList.remove('visible');\n    }\n};","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\nimport * as list from './plans-array.js';\nimport * as dynButton from './dynamic-buttons.js';\nimport {inputToggle} from './input-toggle.js';\n\n// Delete buttons call removal method and deletes from DOM\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n\nconst plansPanel = document.querySelector('#plans-panel');\nconst planTitle = document.querySelector('#plan-title');\n\n//project creation\nconst newPlanBtn = document.querySelector('#add-plans'); \nconst planForm = document.querySelector('#plan-form-id');\nnewPlanBtn.addEventListener('click', () => {\n    inputToggle.toggleOn(planForm);\n    inputToggle.toggleOff(itemForm);\n    itemInput.value = '';//empties the input value of the other form\n});\n\nconst plansList = document.querySelector('#plans-list');\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nfunction planSubmitFunc(e) {\n    e.preventDefault();\n    let newPlan = new Plan(planInput.value);\n    list.pushPlan(newPlan);\n    plansList.appendChild(dynButton.createButton(newPlan.title));\n    planInput.value = ''\n    inputToggle.toggleOff(planForm);\n}\nplanSubmit.addEventListener('click', planSubmitFunc);\n\nconst planCancel = document.querySelector('#plan-cancel');\nfunction planCancelFunc(e) {\n    e.preventDefault();\n    planInput.value = '';\n    inputToggle.toggleOff(planForm);\n}\nplanCancel.addEventListener('click', planCancelFunc);\n\n\n//task creation\nconst itemsList = document.querySelector('#plan-items');\nconst addItem = document.querySelector('#add-item');\nconst itemForm = document.querySelector('#item-form-id');\naddItem.addEventListener('click', () => {\n    inputToggle.toggleOn(itemForm);\n    inputToggle.toggleOff(planForm);\n    planInput.value = ''//empties the input value of the other form\n});\n\nconst itemInput = document.querySelector('#item-input');\nconst itemSubmit = document.querySelector('#item-submit');\nfunction itemSubmitFunc(e) {\n    e.preventDefault();\n    // if(planTitle.textContent === )\n    let newItem = new PlanItem(itemInput.value);\n    itemsList.appendChild(dynButton.createButton(newItem.title));\n    itemInput.value = ''\n    inputToggle.toggleOff(itemForm);\n}\nitemSubmit.addEventListener('click', itemSubmitFunc);\n\nconst itemCancel = document.querySelector('#item-cancel');\nfunction itemCancelFunc(e) {\n    e.preventDefault();\n    itemInput.value = '';\n    inputToggle.toggleOff(itemForm);\n}\n\nitemCancel.addEventListener('click', itemCancelFunc);\n\n\nconst primary = new Plan('Primary');\nconst primaryBtn = document.querySelector('#primary');\n\nprimaryBtn.addEventListener('click', () => {\n    // plansPanel.innerHTML = '';\n    planTitle.textContent = primary.title;\n    console.log(primary);\n    addItem.setAttribute('data-identifier', 'primary');\n});\n\nconst todayBtn = document.querySelector('#today');\n\n//plans dom display\n\nplansList.addEventListener('click', function(e) {\n    if(e.target.classList.contains(e.target.id)) {\n        planTitle.textContent = e.target.textContent;\n        trash.className = e.target.id;\n        console.log(list.planArray);\n    }\n})\n\nconst trash = document.querySelector('#trash');\n\ntrash.addEventListener('click', () => {\n    planTitle.textContent = '';\n    dynButton.btnDel(trash, '.dynamic-buttons');\n    list.arrayDel.del(trash);\n    trash.className = '';\n})","import * as startUp from './DOMfunctions'; \n\ndocument.addEventListener('DOMContentLoaded', startUp);\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","PlanItem","description","dueDate","priority","_description","_priority","_dueDate","planArray","createButton","btn","document","createElement","classList","add","setAttribute","textContent","inputToggle","toggle","remove","planTitle","querySelector","newPlanBtn","planForm","addEventListener","itemForm","itemInput","plansList","planInput","e","preventDefault","newPlan","plan","appendChild","itemsList","addItem","newItem","primary","console","log","target","contains","id","trash","className","element","querySelectorAll","forEach","obj","splice","findIndex"],"sourceRoot":""}