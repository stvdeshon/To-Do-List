{"version":3,"file":"main.js","mappings":"mBACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,ICHxC,MAAMC,EACjBC,YAAYC,GACRC,KAAKC,OAASF,EACdC,KAAKE,WAAa,GAGlBH,YACA,OAAOC,KAAKC,OAGZF,UAAMH,GACNI,KAAKC,OAASL,EAGdO,gBACA,OAAOH,KAAKE,WAGhBE,aAAaC,GACTL,KAAKG,UAAUG,KAAKD,ICnBrB,MAAME,EAAY,GCFnBC,EAAWC,SAASC,cAAc,iBCevBD,SAASC,cAAc,kBAAxC,MAEMC,EAAaF,SAASC,cAAc,cAEpCE,EAAYH,SAASC,cAAc,eACnCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAaL,SAASC,cAAc,gBACpCK,EAAYN,SAASC,cAAc,eAqBzCC,EAAWK,iBAAiB,SDzC5B,WACIR,EAASS,UAAUC,OAAO,mBAC1BV,EAASS,UAAUE,IAAI,cCwC3BN,EAAWG,iBAAiB,SAnB5B,SAAwBI,GACpBA,EAAEC,iBACF,IAAIC,EAAU,IAAIzB,EAAKe,EAAUhB,OFvB9B,IAAkB2B,IEwBND,EFvBff,EAAUD,KAAKiB,GEwBfC,QAAQC,IAAI,GACZV,EAAUW,YC9BP,SAAsBC,GACzB,MAAMC,EAAMnB,SAASoB,cAAc,UAInC,OAHAD,EAAIX,UAAUE,IAAI,oBAClBS,EAAIE,aAAa,KAAMH,GACvBC,EAAIG,YAAcJ,EACXC,EDyBe,CAAuBN,EAAQvB,QACrDa,EAAUhB,MAAQ,GAClBY,EAASS,UAAUC,OAAO,WAC1BV,EAASS,UAAUE,IAAI,sBAY3BL,EAAWE,iBAAiB,SAT5B,SAAwBI,GACpBA,EAAEC,iBACFT,EAAUhB,MAAQ,GAClBY,EAASS,UAAUC,OAAO,WAC1BV,EAASS,UAAUE,IAAI,sBASXV,SAASC,cAAc,SACtBD,SAASC,cAAc,UAMtBD,SAASC,cAAc,eACxBD,SAASC,cAAc,eEvDxCc,QAAQC,IAAI,+BAEZhB,SAASO,iBAAiB,mBAAoB,I","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/lists-array.js","webpack://to-do-list/./src/input-toggle.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/dynamic-buttons.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value;\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    // removeToDoItems() {\n\n    // }\n}","//this module holds the array of projects that populate the sidebar and the functions for adding and removing them\n\nexport const planArray = []; //the array items will be pushed to the #plans-list div \n\nexport function pushPlan(plan) {\n    planArray.push(plan)\n}\n\nexport function splitPlan() {\n    //if value === text conditional here\n    planArray.split()//removes associated plan from array of objects\n}","const planForm = document.querySelector('#plan-form-id');\n\nfunction projectInputToggle() {\n    planForm.classList.remove('plan-form-class');\n    planForm.classList.add('visible');\n} //ideally I can use this on both project and the task inputs both\n\nexport {planForm, projectInputToggle}","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\nimport * as lists from './lists-array.js';\nimport * as dynButton from './dynamic-buttons.js';\nimport {planForm, projectInputToggle} from './input-toggle.js';\n\n// Add character limit to PlanItem titles\n\n// Delete buttons call removal method and deletes from DOM\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n\nconst newPlans = document.querySelector('#lower-sidebar'); //will have plan titled buttons appended to it\n\nconst newPlanBtn = document.querySelector('#add-plans'); //creates and appends a modal form to title and submit a new plan to sideBarPlans\n\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nconst planCancel = document.querySelector('#plan-cancel');\nconst plansList = document.querySelector('#plans-list');\n\n\nfunction planSubmitFunc(e) {\n    e.preventDefault();\n    let newPlan = new Plan(planInput.value);\n    lists.pushPlan(newPlan);\n    console.log(lists.planArray);\n    plansList.appendChild(dynButton.createButton(newPlan.title));\n    planInput.value = ''\n    planForm.classList.remove('visible');\n    planForm.classList.add('plan-form-class');\n}\n\nfunction planCancelFunc(e) {\n    e.preventDefault();\n    planInput.value = '';\n    planForm.classList.remove('visible');\n    planForm.classList.add('plan-form-class');\n}\n\nnewPlanBtn.addEventListener('click', projectInputToggle);\nplanSubmit.addEventListener('click', planSubmitFunc);\nplanCancel.addEventListener('click', planCancelFunc);\n\n\n//these two are sidebar elements and function similarly to the project buttons that will be appended under sidebarPlans in that they will display to the main panel\nconst miscBtn = document.querySelector('#misc');\nconst todayBtn = document.querySelector('#today');\n\n\n//the following elements will be the form for adding a new project\n\n\nconst planTitle = document.querySelector('#plan-title'); //this is where a project's title will be displayed on the main panel\nconst taskList = document.querySelector('#plan-items'); //this div should have task cards with their own functionality appended to it\n","export function createButton(index) {\n    const btn = document.createElement('button');\n    btn.classList.add('plans-list-items');\n    btn.setAttribute('id', index); //originally const formattedTitle = `Title: ${title}`; from the library app\n    btn.textContent = index;\n    return btn;\n}\n\nexport function deleteButton() {\n    const title = document.getElementById('book-title');\n\n    return lists.planArray.findIndex(obj => obj.title === title.textContent);\n\n}","import * as filler from './DOMfunctions'; \n\nconsole.log('I get called from print.js!');\n\ndocument.addEventListener('DOMContentLoaded', filler);\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","planArray","planForm","document","querySelector","newPlanBtn","planInput","planSubmit","planCancel","plansList","addEventListener","classList","remove","add","e","preventDefault","newPlan","plan","console","log","appendChild","index","btn","createElement","setAttribute","textContent"],"sourceRoot":""}