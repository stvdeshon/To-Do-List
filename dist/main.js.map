{"version":3,"file":"main.js","mappings":"mBACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,ICHxC,MAAMC,EACjBC,YAAYC,GACRC,KAAKC,OAASF,EACdC,KAAKE,WAAa,GAGlBH,YACA,OAAOC,KAAKC,OAGZF,UAAMH,GACNI,KAAKC,OAASL,EAGdO,gBACA,OAAOH,KAAKE,WAGhBE,aAAaC,GACTL,KAAKG,UAAUG,KAAKD,GAGxBE,oBCVaC,SAASC,cAAc,cAAxC,MAEMC,EAAaF,SAASC,cAAc,cACpCE,EAAWH,SAASC,cAAc,QAClCG,EAAYJ,SAASC,cAAc,eACnCI,EAAaL,SAASC,cAAc,gBACpCK,EAAaN,SAASC,cAAc,gBA0B1CC,EAAWK,iBAAiB,SAvB5B,WACIJ,EAASK,UAAUC,OAAO,aAC1BN,EAASK,UAAUE,IAAI,cAsB3BL,EAAWE,iBAAiB,SAnB5B,SAAwBI,GAEpBC,QAAQC,IAAI,IAAIxB,EAAKe,EAAUhB,QAG/BgB,EAAUhB,MAAQ,GAClBe,EAASK,UAAUC,OAAO,WAC1BN,EAASK,UAAUE,IAAI,aACvBC,EAAEG,oBAYNR,EAAWC,iBAAiB,SAT5B,SAAwBI,GACpBP,EAAUhB,MAAQ,GAClBe,EAASK,UAAUC,OAAO,WAC1BN,EAASK,UAAUE,IAAI,aACvBC,EAAEG,oBAgBUd,SAASC,cAAc,SACtBD,SAASC,cAAc,UAMtBD,SAASC,cAAc,eACxBD,SAASC,cAAc,eCjExCW,QAAQC,IAAI,+BAEZb,SAASO,iBAAiB,mBAAoB,I","sources":["webpack://to-do-list/webpack/bootstrap","webpack://to-do-list/webpack/runtime/make namespace object","webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    removeToDoItems() {\n        //remove an item from the array\n    }\n}\n\n// Message to me later as to what I may change in this module:\n// For now, this only sets a title and a list of constituent list items\n// although I may change the addToDoItems parameter to use spread syntax\n// if at some future point it proves necessary. This module has no DOM \n// methods but I should be able to use the getters and setters in other\n// modules to that effect. There might be a need for an 'is complete'\n// method either in this class or the to do item class to mark\n// individual projects but that all remains to be seen.","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\n\n// Add character limit to PlanItem titles\n\n// Delete buttons call removal method and deletes from DOM\n\n// The add plan button calls up a form, submitting the form instantiates a new Plan object and populates the sidebar with it\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n\nconst newPlans = document.querySelector('#new-plans'); //will have plan titled buttons appended to it\n\nconst newPlanBtn = document.querySelector('#add-plans'); //creates and appends a modal form to title and submit a new plan to sideBarPlans\nconst planForm = document.querySelector('#aaa');\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nconst planCancel = document.querySelector('#plan-cancel');\n\n\nfunction projectInputFunc() {\n    planForm.classList.remove('plan-form');\n    planForm.classList.add('visible');\n}\n\nfunction planSubmitFunc(e) {\n    \n    console.log(new Plan(planInput.value));\n    //someArray.push(new Plan (planinput.value and so forth))\n    //append array as buttons to div id='plans';\n    planInput.value = ''\n    planForm.classList.remove('visible');\n    planForm.classList.add('plan-form');\n    e.preventDefault();\n}\n\nfunction planCancelFunc(e) {\n    planInput.value = ''; // may not be necessary\n    planForm.classList.remove('visible');\n    planForm.classList.add('plan-form');\n    e.preventDefault();\n}\n\nnewPlanBtn.addEventListener('click', projectInputFunc);\nplanSubmit.addEventListener('click', planSubmitFunc);\nplanCancel.addEventListener('click', planCancelFunc);\n\n// I might need an array of todolist projects themselves to store them and append then in order\n\n\n\n\n\n\n\n//these two are sidebar elements and function similarly to the project buttons that will be appended under sidebarPlans in that they will display to the main panel\nconst miscBtn = document.querySelector('#misc');\nconst todayBtn = document.querySelector('#today');\n\n\n//the following elements will be the form for adding a new project\n\n\nconst planTitle = document.querySelector('#plan-title'); //this is where a project's title will be displayed on the main panel\nconst taskList = document.querySelector('#plan-items'); //this div should have task cards with their own functionality appended to it","import * as filler from './DOMfunctions'; //this is subject to change\n\nconsole.log('I get called from print.js!');\n\ndocument.addEventListener('DOMContentLoaded', filler);"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","removeToDoItems","document","querySelector","newPlanBtn","planForm","planInput","planSubmit","planCancel","addEventListener","classList","remove","add","e","console","log","preventDefault"],"sourceRoot":""}