{"version":3,"file":"main.js","mappings":"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","sources":["webpack://to-do-list/./src/to-do-lists.js","webpack://to-do-list/./src/to-do-items.js","webpack://to-do-list/./src/plans-array.js","webpack://to-do-list/./src/input-toggle.js","webpack://to-do-list/./src/DOMfunctions.js","webpack://to-do-list/./src/dynamic-buttons.js","webpack://to-do-list/./src/index.js"],"sourcesContent":["/*This module is for creating new user projects on the To Do List*/\n\nexport default class Plan {\n    constructor(title){\n        this._title = title;\n        this._toDoItems = [];\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    get toDoItems() {\n        return this._toDoItems;\n    }\n\n    addToDoItems(item) {\n        this.toDoItems.push(item);\n    }\n\n    // removeToDoItems() {\n\n    // }\n}","/*This module is for creating new Do Do List items*/\n\nexport default class PlanItem {\n    constructor(parent, title, description, dueDate, priority) {\n        this._parent = parent;\n        this._title = title;\n        this._dueDate = dueDate;\n        this._description = description;\n        this._priority = priority;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    get title() {\n        return this._title;\n    }\n\n    set title(value) {\n        this._title = value;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(value) {\n        this._description = value;\n    }\n\n    get priority() {\n        return this._priority;\n    }\n\n    set priority(value) {\n        this._priority = value;\n    }\n\n    get dueDate() {\n        return this._dueDate;\n    }\n\n    set dueDate(value) {\n        this._dueDate = value;\n    }\n}","export const planArray = [];\n\nexport function pushPlan(plan) {\n    planArray.push(plan)\n}\n\nexport const arrayDel = {\n\n    del: function (element) {\n\n        function splitArray() { \n            const index = planArray.findIndex(obj => obj.title === element.className);//element in this case refers to the delete button's class\n            return index;\n        }\n\n        planArray.forEach((obj) => {\n            if (element.classList.contains(obj.title)) {\n                planArray.splice(splitArray(), 1);\n            }\n        });\n    }\n\n}\n\nexport const itemToList = {\n\n    addTask: function (title, task) {\n\n        function pushToProject() {\n        const index = planArray.findIndex(obj => obj.title === title.textContent);//element here refers to the project's title DOM element\n        return index;\n        }\n\n        planArray.forEach((obj) => {\n            if(title.textContent === obj.title) {\n                obj.addToDoItems(task);\n                console.log(obj);\n            }\n        });\n\n    \n\n},\n\n    // displayTasks: function(target) { \n\n    //     function displayToDom() {\n    //     const index = planArray.findIndex(obj => obj.title === target.textContent);\n    //     return index;\n    //     }\n\n    //     planArray.forEach((obj) => {\n    //         if(obj.title === target.textContent) {\n                \n    //             console.log(obj.toDoItems());\n    //         }\n    //     })\n    // }\n}\n\n\n\n","export const inputToggle = {\n\n    toggleOn: function (toggle) {\n        toggle.classList.add('visible');\n        toggle.classList.remove('invisible')\n    },\n    \n    toggleOff: function (toggle) {\n        toggle.classList.add('invisible');\n        toggle.classList.remove('visible');\n    }\n};","import Plan from './to-do-lists';\nimport PlanItem from './to-do-items';\nimport * as list from './plans-array.js';\nimport * as dynButton from './dynamic-buttons.js';\nimport {inputToggle} from './input-toggle.js';\n\n// Delete buttons call removal method and deletes from DOM\n\n// The newly created 'plan' buttons on the sidebar will populate the display with the corresponding object's data \n// That object's display will have an 'add item' button that will open a form that submits and creates a new item object\n// The subsequent item button will populate the display and have a few functional buttons to edit the corresponding item object and change the DOM values\n\n\nconst plansPanel = document.querySelector('#plans-panel');\nconst planTitle = document.querySelector('#plan-title');\n\n//project creation\nconst newPlanBtn = document.querySelector('#add-plans'); \nconst planForm = document.querySelector('#plan-form-id');\nnewPlanBtn.addEventListener('click', () => {\n    inputToggle.toggleOn(planForm);\n    inputToggle.toggleOff(itemForm);\n    itemInput.value = '';//empties the input value of the other form\n});\n\nconst plansList = document.querySelector('#plans-list');\nconst planInput = document.querySelector('#plan-input');\nconst planSubmit = document.querySelector('#plan-submit');\nfunction planSubmitFunc(e) {\n    e.preventDefault();\n    let newPlan = new Plan(planInput.value);\n    list.pushPlan(newPlan);\n    plansList.appendChild(dynButton.createButton(newPlan.title, 'plan-buttons'));\n    planInput.value = ''\n    inputToggle.toggleOff(planForm);\n}\nplanSubmit.addEventListener('click', planSubmitFunc);\n\nconst planCancel = document.querySelector('#plan-cancel');\nfunction planCancelFunc(e) {\n    e.preventDefault();\n    planInput.value = '';\n    inputToggle.toggleOff(planForm);\n}\nplanCancel.addEventListener('click', planCancelFunc);\n\n\n//plans dom display\nconst todayBtn = document.querySelector('#today');\n\nconst itemsList = document.querySelector('#plan-items');\n\nplansList.addEventListener('click', function(e) {\n\n    planTitle.textContent = e.target.textContent;\n    trash.className = e.target.id;\n    trash.style.display = 'block';\n    itemsList.innerHTML = '';\n    console.log(list.planArray);\n\n    list.planArray.forEach((obj) => {\n        obj.toDoItems.forEach((item) => {\n            if(obj.title === e.target.textContent) {\n                itemsList.innerHTML = '';\n                for (let i = 0; i< obj.toDoItems.length; i++){\n                itemsList.innerHTML += `<button class=\".plan-buttons\" id=\"${obj.toDoItems[i].title}\">${obj.toDoItems[i].title}</button>`;\n                }\n            }\n            })\n    })\n})\n\n\nconst trash = document.querySelector('#trash');\ntrash.addEventListener('click', (e) => {\nplanTitle.textContent = '';\ndynButton.btnDel(trash, '.plan-buttons');\nconst target = e.target;\nlist.arrayDel.del(trash);\ntrash.className = '';\n})\n\nconst primary = new Plan('Primary');\nconst primaryBtn = document.querySelector('#primary');\n\nexport default function primaryLoad(e) {\n    planTitle.textContent = primary.title;\n    trash.style.display = 'none';\n    itemsList.innerHTML = '';\n    console.log(primary);\n    primary.toDoItems.forEach((item) => {\n            itemsList.innerHTML = '';\n            for (let i = 0; i < primary.toDoItems.length; i++){\n            itemsList.innerHTML += `<button class=\".plan-buttons\" id=\"${primary.toDoItems[i].title}\">${primary.toDoItems[i].title}</button>`;   \n        }\n    })\n}\n\nprimaryBtn.addEventListener('click', primaryLoad);\n\n\n\n//task creation\n\nconst addItem = document.querySelector('#add-item');\nconst itemForm = document.querySelector('#item-form-id');\n\n//event listener for the 'New Task' button and the form it brings up\naddItem.addEventListener('click', () => {\n    inputToggle.toggleOn(itemForm);\n    inputToggle.toggleOff(planForm);\n    planInput.value = ''//empties the input value of the other form\n});\n\n\n// event listener for the form's submit button\nconst itemInput = document.querySelector('#item-input');\nconst itemSubmit = document.querySelector('#item-submit');\nfunction itemSubmitFunc(e) {\n    e.preventDefault();\n    let newItem = new PlanItem(planTitle.textContent, itemInput.value); //planTitle.textcontent is just an argument to match the task with the project of the same name\n    //the following condition matches the DOM title with the task's parent list property\n    if(planTitle.textContent === newItem.parent && planTitle.textContent !== 'Primary'){\n        list.itemToList.addTask(planTitle, newItem);\n        // itemsList.appendChild(dynButton.createButton(newItem.title, 'item-buttons'));\n        itemsList.innerHTML += `\n            <div class=\"item-buttons\">\n                <div class=\"item-buttons-left\">\n                    <button class=\"status\">c</button>\n                    <button id=\"${newItem.title}\">${newItem.title}</button>\n                </div>\n                <div class=\"item-buttons-right\">\n                    <input type=\"date\" class=\"due-date\">\n                    <button class=\"x\">x</button>\n                </div>\n            </div>`;\n        itemInput.value = ''\n        inputToggle.toggleOff(itemForm);\n    } else if (planTitle.textContent === 'Primary') {\n        primary.addToDoItems(newItem);\n        // itemsList.appendChild(dynButton.createButton(newItem.title, 'item-buttons'));\n        itemsList.innerHTML += `\n            <div class=\"item-buttons\">\n                <div class=\"item-buttons-left\">\n                    <button class=\"status\">c</button>\n                    <button id=\"${newItem.title}\">${newItem.title}</button>\n                </div>\n                <div class=\"item-buttons-right\">\n                    <input type=\"date\" class=\"due-date\">\n                    <button class=\"x\">x</button>\n                </div>\n            </div>`;\n        itemInput.value = ''\n        inputToggle.toggleOff(itemForm);\n\n    }\n}\n\nitemSubmit.addEventListener('click', itemSubmitFunc);\n\nconst itemCancel = document.querySelector('#item-cancel');\nfunction itemCancelFunc(e) {\n    e.preventDefault();\n    itemInput.value = '';\n    inputToggle.toggleOff(itemForm);\n}\n\nitemCancel.addEventListener('click', itemCancelFunc);\n","export function createButton(title, elemClass) {\n    const btn = document.createElement('button');\n    btn.classList.add(`${elemClass}`);//note: do NOT add periods into the formatted strings for this!\n    btn.setAttribute('id', title);\n    btn.textContent = title;\n    return btn;\n}\n\n\nexport function btnDel(element, elemClass) {\n    const button = document.querySelectorAll(`${elemClass}`);\n    button.forEach((btn) => {\n        if (element.classList.contains(btn.id)) {\n        btn.remove();\n        }\n    });\n}\n\n","import primaryLoad from './DOMfunctions'; \n\ndocument.addEventListener('DOMContentLoaded', primaryLoad);\n"],"names":["Plan","constructor","title","this","_title","_toDoItems","toDoItems","addToDoItems","item","push","PlanItem","parent","description","dueDate","priority","_parent","_dueDate","_description","_priority","value","planArray","inputToggle","toggle","classList","add","remove","planTitle","document","querySelector","newPlanBtn","planForm","addEventListener","itemForm","itemInput","plansList","planInput","e","preventDefault","newPlan","plan","appendChild","elemClass","btn","createElement","setAttribute","textContent","itemsList","target","trash","className","id","style","display","innerHTML","console","log","obj","forEach","i","length","element","querySelectorAll","contains","splice","findIndex","primary","primaryLoad","addItem","newItem","task"],"sourceRoot":""}